#pragma once

////////////////////////////////////////////////////////////////
// Standard includes.
////////////////////////////////////////////////////////////////

#include <vector>

////////////////////////////////////////////////////////////////
// Current target includes.
////////////////////////////////////////////////////////////////

#include "floah-data/data_listener.h"

namespace floah
{
    class DataSource
    {
    public:
        ////////////////////////////////////////////////////////////////
        // Constructors.
        ////////////////////////////////////////////////////////////////

        DataSource();

        DataSource(const DataSource&) = delete;

        DataSource(DataSource&&) noexcept = delete;

        virtual ~DataSource() noexcept;

        DataSource& operator=(const DataSource&) = delete;

        DataSource& operator=(DataSource&&) noexcept = delete;

        ////////////////////////////////////////////////////////////////
        // Listeners.
        ////////////////////////////////////////////////////////////////

        virtual void addDataListener(DataListener& listener);

        virtual void removeDataListener(DataListener& listener);

        virtual void emitDataSourceUpdate();

    private:
        ////////////////////////////////////////////////////////////////
        // Member variables.
        ////////////////////////////////////////////////////////////////

        std::vector<DataListener*> listeners;
    };
}  // namespace floah
